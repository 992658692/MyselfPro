<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
	default-autowire="byType">
	
	<!-- DruidDataSource数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="filters" value="config" /><!-- config.decrypt=true -->
	</bean>
	
	<!-- jdbc 传统的数据语句模版 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 建立事务管理组件 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"></bean>
	
	<!-- 事务的实现方式分3种 3选1即可 -->
	<!-- 采用注解@Transactional的形式启动事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 采用AOP的方式配置到关注点中 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		#在哪些方法上添加事务管理,这里写方法名且支持通配符
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="modify*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="select*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="search*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="query*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		#expression为切面的业务点 即把事务作用在哪些组件上
		<aop:pointcut id="transactionPointcut" expression="execution(public * com.upay.service.bop.impl.*.*(..))" />
		#advice为需要事务的组件   pointcut为事务管理组件
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut" />
	</aop:config> -->
	
	
		<!-- 使用事务模版 显式操作在需要事务的地方 -->
		<!-- 编程式的TransactionTemplate 会和逻辑代码糅合在一起，可以在方法内更精准的控制事务单元，更加的灵活方便。
			   相比@transaction 如果要实现精准控制复杂逻辑的事务，则需要将dao批量操作的逻辑，抽离到DAO层的方法中，才可达到精准控制的目的。 -->
<!-- 	<bean id="transactionTemplate"  class="org.springframework.transaction.support.TransactionTemplate">  
    	<property name="transactionManager" ref="transactionManager"></property>  
    </bean> -->
    
	
</beans>